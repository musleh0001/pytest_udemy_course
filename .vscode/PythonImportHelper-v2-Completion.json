[
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "now",
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "isExtraImport": true,
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "Company",
        "importPath": "companies.models",
        "description": "companies.models",
        "isExtraImport": true,
        "detail": "companies.models",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "routers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "ModelViewSet",
        "importPath": "rest_framework.viewsets",
        "description": "rest_framework.viewsets",
        "isExtraImport": true,
        "detail": "rest_framework.viewsets",
        "documentation": {}
    },
    {
        "label": "PageNumberPagination",
        "importPath": "rest_framework.pagination",
        "description": "rest_framework.pagination",
        "isExtraImport": true,
        "detail": "rest_framework.pagination",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "companies_router",
        "importPath": "companies.urls",
        "description": "companies.urls",
        "isExtraImport": true,
        "detail": "companies.urls",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "api.coronavstech.companies.migrations.0001_initial",
        "description": "api.coronavstech.companies.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Company',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=30, unique=True)),",
        "detail": "api.coronavstech.companies.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "BasicCompanyAPITestCase",
        "kind": 6,
        "importPath": "api.coronavstech.companies.tests.test_api",
        "description": "api.coronavstech.companies.tests.test_api",
        "peekOfCode": "class BasicCompanyAPITestCase(TestCase):\n    def setUp(self) -> None:\n        self.client = Client()\n        self.companies_url = reverse(\"companies-list\")\n    def tearDown(self) -> None:\n        pass\n# {basename}-list/create/update/destroy\nclass TestGetCompanies(BasicCompanyAPITestCase):\n    def test_zero_companies_should_return_empty_list(self) -> None:\n        response = self.client.get(self.companies_url)",
        "detail": "api.coronavstech.companies.tests.test_api",
        "documentation": {}
    },
    {
        "label": "TestGetCompanies",
        "kind": 6,
        "importPath": "api.coronavstech.companies.tests.test_api",
        "description": "api.coronavstech.companies.tests.test_api",
        "peekOfCode": "class TestGetCompanies(BasicCompanyAPITestCase):\n    def test_zero_companies_should_return_empty_list(self) -> None:\n        response = self.client.get(self.companies_url)\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(json.loads(response.content), [])\n    def test_one_company_exists_should_succeed(self) -> None:\n        test_company = Company.objects.create(name=\"Amazon\")\n        response = self.client.get(self.companies_url)\n        response_content = json.loads(response.content)[0]\n        self.assertEqual(response.status_code, 200)",
        "detail": "api.coronavstech.companies.tests.test_api",
        "documentation": {}
    },
    {
        "label": "TestPostCompanies",
        "kind": 6,
        "importPath": "api.coronavstech.companies.tests.test_api",
        "description": "api.coronavstech.companies.tests.test_api",
        "peekOfCode": "class TestPostCompanies(BasicCompanyAPITestCase):\n    def test_create_company_without_arguments_should_fail(self) -> None:\n        response = self.client.post(path=self.companies_url)\n        self.assertEqual(response.status_code, 400)\n        self.assertEqual(json.loads(response.content), {\"name\": [\"This field is required.\"]})\n    def test_create_existing_company_should_fail(self) -> None:\n        Company.objects.create(name=\"apple\")\n        response = self.client.post(path=self.companies_url, data={\"name\": \"apple\"})\n        self.assertEqual(response.status_code, 400)\n        self.assertEqual(json.loads(response.content), {\"name\": [\"company with this name already exists.\"]})",
        "detail": "api.coronavstech.companies.tests.test_api",
        "documentation": {}
    },
    {
        "label": "CompanyAdmin",
        "kind": 6,
        "importPath": "api.coronavstech.companies.admin",
        "description": "api.coronavstech.companies.admin",
        "peekOfCode": "class CompanyAdmin(admin.ModelAdmin):\n    pass",
        "detail": "api.coronavstech.companies.admin",
        "documentation": {}
    },
    {
        "label": "CompaniesConfig",
        "kind": 6,
        "importPath": "api.coronavstech.companies.apps",
        "description": "api.coronavstech.companies.apps",
        "peekOfCode": "class CompaniesConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'companies'",
        "detail": "api.coronavstech.companies.apps",
        "documentation": {}
    },
    {
        "label": "Company",
        "kind": 6,
        "importPath": "api.coronavstech.companies.models",
        "description": "api.coronavstech.companies.models",
        "peekOfCode": "class Company(models.Model):\n    class CompanyStatus(models.TextChoices):\n        LAYOFFS = \"Layoffs\"\n        HIRING_FREEZE = \"Hiring Freeze\"\n        HIRING = \"Hiring\"\n    name = models.CharField(max_length=30, unique=True)\n    status = models.CharField(choices=CompanyStatus.choices, default=CompanyStatus.HIRING, max_length=30)\n    last_update = models.DateTimeField(default=now, editable=True)\n    application_link = models.URLField(blank=True)\n    notes = models.CharField(max_length=100, blank=True)",
        "detail": "api.coronavstech.companies.models",
        "documentation": {}
    },
    {
        "label": "CompanySerializer",
        "kind": 6,
        "importPath": "api.coronavstech.companies.serializers",
        "description": "api.coronavstech.companies.serializers",
        "peekOfCode": "class CompanySerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Company\n        fields = \"__all__\"",
        "detail": "api.coronavstech.companies.serializers",
        "documentation": {}
    },
    {
        "label": "companies_router",
        "kind": 5,
        "importPath": "api.coronavstech.companies.urls",
        "description": "api.coronavstech.companies.urls",
        "peekOfCode": "companies_router = routers.DefaultRouter()\ncompanies_router.register('companies', viewset=CompanyViewSet, basename='companies')",
        "detail": "api.coronavstech.companies.urls",
        "documentation": {}
    },
    {
        "label": "CompanyViewSet",
        "kind": 6,
        "importPath": "api.coronavstech.companies.views",
        "description": "api.coronavstech.companies.views",
        "peekOfCode": "class CompanyViewSet(ModelViewSet):\n    serializer_class = CompanySerializer\n    queryset = Company.objects.all().order_by('-last_update')\n    pagination_class = PageNumberPagination",
        "detail": "api.coronavstech.companies.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "api.coronavstech.coronavstech.asgi",
        "description": "api.coronavstech.coronavstech.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "api.coronavstech.coronavstech.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "api.coronavstech.coronavstech.settings",
        "description": "api.coronavstech.coronavstech.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = '&(cmi4@5l6xu^x5pnble5kb%bkk+stqmp53p0q6!aq$8m#kg2w'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "api.coronavstech.coronavstech.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "api.coronavstech.coronavstech.settings",
        "description": "api.coronavstech.coronavstech.settings",
        "peekOfCode": "SECRET_KEY = '&(cmi4@5l6xu^x5pnble5kb%bkk+stqmp53p0q6!aq$8m#kg2w'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "api.coronavstech.coronavstech.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "api.coronavstech.coronavstech.settings",
        "description": "api.coronavstech.coronavstech.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "api.coronavstech.coronavstech.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "api.coronavstech.coronavstech.settings",
        "description": "api.coronavstech.coronavstech.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    # installed",
        "detail": "api.coronavstech.coronavstech.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "api.coronavstech.coronavstech.settings",
        "description": "api.coronavstech.coronavstech.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    # installed\n    'rest_framework',\n    # created",
        "detail": "api.coronavstech.coronavstech.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "api.coronavstech.coronavstech.settings",
        "description": "api.coronavstech.coronavstech.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'coronavstech.urls'",
        "detail": "api.coronavstech.coronavstech.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "api.coronavstech.coronavstech.settings",
        "description": "api.coronavstech.coronavstech.settings",
        "peekOfCode": "ROOT_URLCONF = 'coronavstech.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "api.coronavstech.coronavstech.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "api.coronavstech.coronavstech.settings",
        "description": "api.coronavstech.coronavstech.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "api.coronavstech.coronavstech.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "api.coronavstech.coronavstech.settings",
        "description": "api.coronavstech.coronavstech.settings",
        "peekOfCode": "WSGI_APPLICATION = 'coronavstech.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/3.1/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation",
        "detail": "api.coronavstech.coronavstech.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "api.coronavstech.coronavstech.settings",
        "description": "api.coronavstech.coronavstech.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "api.coronavstech.coronavstech.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "api.coronavstech.coronavstech.settings",
        "description": "api.coronavstech.coronavstech.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "api.coronavstech.coronavstech.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "api.coronavstech.coronavstech.settings",
        "description": "api.coronavstech.coronavstech.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\nSTATIC_URL = '/static/'",
        "detail": "api.coronavstech.coronavstech.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "api.coronavstech.coronavstech.settings",
        "description": "api.coronavstech.coronavstech.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\nSTATIC_URL = '/static/'",
        "detail": "api.coronavstech.coronavstech.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "api.coronavstech.coronavstech.settings",
        "description": "api.coronavstech.coronavstech.settings",
        "peekOfCode": "USE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\nSTATIC_URL = '/static/'",
        "detail": "api.coronavstech.coronavstech.settings",
        "documentation": {}
    },
    {
        "label": "USE_L10N",
        "kind": 5,
        "importPath": "api.coronavstech.coronavstech.settings",
        "description": "api.coronavstech.coronavstech.settings",
        "peekOfCode": "USE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\nSTATIC_URL = '/static/'",
        "detail": "api.coronavstech.coronavstech.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "api.coronavstech.coronavstech.settings",
        "description": "api.coronavstech.coronavstech.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\nSTATIC_URL = '/static/'",
        "detail": "api.coronavstech.coronavstech.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "api.coronavstech.coronavstech.settings",
        "description": "api.coronavstech.coronavstech.settings",
        "peekOfCode": "STATIC_URL = '/static/'",
        "detail": "api.coronavstech.coronavstech.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "api.coronavstech.coronavstech.urls",
        "description": "api.coronavstech.coronavstech.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include(companies_router.urls))\n]",
        "detail": "api.coronavstech.coronavstech.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "api.coronavstech.coronavstech.wsgi",
        "description": "api.coronavstech.coronavstech.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "api.coronavstech.coronavstech.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "api.coronavstech.manage",
        "description": "api.coronavstech.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'coronavstech.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "api.coronavstech.manage",
        "documentation": {}
    }
]